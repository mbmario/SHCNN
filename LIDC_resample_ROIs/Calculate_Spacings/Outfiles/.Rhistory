?read.csv()
CD="/home/mario/Documents/LIDC_resample_ROIs/Outfiles"
dims <- read.table("voxel_dimensions.csv", header=FALSE, sep=",", col.names=c("patn", "nodn", "xrange", "yrange", "zrange"), stringsAsFactors = FALSE)
dims <- read.table("./voxel_dimensions.csv", header=FALSE, sep=",", col.names=c("patn", "nodn", "xrange", "yrange", "zrange"), stringsAsFactors = FALSE)
setwd(CD)
dims <- read.table("./voxel_dimensions.csv", header=FALSE, sep=",", col.names=c("patn", "nodn", "xrange", "yrange", "zrange"), stringsAsFactors = FALSE)
View(dims)
str(dims)
spacings <- read.table("./voxel_spacings.csv", header=TRUE, sep=",", stringsAsFactors = FALSE)
spacings <- read.table("./voxel_spacing.csv", header=TRUE, sep=",", stringsAsFactors = FALSE)
View(spacings)
spacings$filename
test <- spacings$filename[0:10]
test
myfunction <- function(a, b) {
return a + b
}
myfunction <- function(a) {
c = a * a
return c
}
myfunction <- function(a) {
c = a * a
return(c)
}
myfunction(3)
sapply(c(1,2,3), myfunction)
test
test[0]
test[1]
filename
filename = test[1]
?regexpr
grep("LIDC-IDRI" filename)
grep("LIDC-IDRI", filename)
grep("LIDC-IDRI", filename, value-TRUE)
grep("LIDC-IDRI", filename, value=TRUE)
grep("LIDC-IDRI", filename, value=FALSE)
regexpr("LIDC-IDRI", filename, value=FALSE)
regexpr("LIDC-IDRI", filename)
regexpr("LIDC-IDRI", filename)[1]
substr(regexpr("LIDC-IDRI", filename)[1], regexpr("LIDC-IDRI", filename)[1] + 15)
?substr
substr(filename, regexpr("LIDC-IDRI", filename)[1], regexpr("LIDC-IDRI", filename)[1] + 15)
substr(filename, regexpr("LIDC-IDRI", filename)[1] + 10, regexpr("LIDC-IDRI", filename)[1] + 13)
result = substr(filename, regexpr("LIDC-IDRI", filename)[1], regexpr("LIDC-IDRI", filename)[1] + 15)
result
result <- substr(filename, regexpr("LIDC-IDRI", filename)[1] + 10, regexpr("LIDC-IDRI", filename)[1] + 13)
result
int(result)
strtoi(result)
filename_to_pnint <- function(filename) {
result <- substr(filename, regexpr("LIDC-IDRI", filename)[1] + 10, regexpr("LIDC-IDRI", filename)[1] + 13)
return (strtoi(result))
}
filename_to_pnint(filename)
?apply
?sapply
sapply(test, filename_to_pnint)
a <- sapply(test, filename_to_pnint)
a
str(a)
a[1:10]
a[1]
filename_to_pnint(filename)
a <- lapply(test, filename_to_pnint)
a
a <- sapply(test, filename_to_pnint, USE.NAMES = FALSE)
a
filename
test
a
unique(a)
duplicated(a)
b <- 5:5+length(a)
b
b <- 5:(5+length(a))
b
cbind(a,b)
test <- cbind(a,b)
test
test[unique(a),]
test[unique(test$a),]
(test$a)
test <- data.frame(a=a, b=b)
b <- 5:(5+length(a)-2)
b <- 5:(5+length(a)-1)
test <- data.frame(a=a, b=b)
test
str(test)
b <- 5:(5+length(a))
a <- c(a,1)
test <- data.frame(a=a, b=b)
str(test)
test
duplicated(test$a)
test[duplicated(test$a),]
log <- duplicated(test$a)
log
test[log]
test[log,]
test
test[log=FALSE,]
test[!log,]
spacings <- spacings[!duplicated(spacings$patn),]
spacings
# filename, x_spacing, y_spacing, z_spacing
spacings <- read.table("./voxel_spacing.csv", header=TRUE, sep=",", stringsAsFactors = FALSE)
# add a numerical column to spacings so that it can be matched to dims
filename_to_patn <- function(filename) { # str filename -> int patient number
result <- substr(filename, regexpr("LIDC-IDRI", filename)[1] + 10, regexpr("LIDC-IDRI", filename)[1] + 13)
return (strtoi(result))
}
spacings$patn <- filename_to_patn(spacings$filename)
spacings
View(spacings)
spacings$patn <- filename_to_patn(spacings$filename)
View(spacings)
test
test[!duplicated(test$a),]
spacings[!duplicated(spacings$patn),]
View(spacings[!duplicated(spacings$patn),])
test <- data.frame(a=a, b=b)
a = c(a,NA)
a
is.na(a)
is.na(spacings$patn)
spacings[is.na(patn),]
spacings[is.na(spacings$patn),]
head(spacings[is.na(spacings$patn),])
test <- head(spacings[is.na(spacings$patn),])
filename_to_patn(test$filename)
filename = test$filename[1]
filename
substr(filename, regexpr("LIDC-IDRI", filename)[1] + 10, regexpr("LIDC-IDRI", filename)[1] + 13)
(strtoi(result))
result <- substr(filename, regexpr("LIDC-IDRI", filename)[1] + 10, regexpr("LIDC-IDRI", filename)[1] + 13)
result
(strtoi(result))
str(result)
as.numeric(result)
spacings <- read.table("./voxel_spacing.csv", header=TRUE, sep=",", stringsAsFactors = FALSE)
# add a numerical column to spacings so that it can be matched to dims
filename_to_patn <- function(filename) { # str filename -> int patient number
result <- substr(filename, regexpr("LIDC-IDRI", filename)[1] + 10, regexpr("LIDC-IDRI", filename)[1] + 13)
return (as.numeric(result))
}
spacings$patn <- filename_to_patn(spacings$filename)
spacings <- spacings[!duplicated(spacings$patn),]
View(spacings)
is.na(spacings$patn)
str(spacings)
str(dims)
result
int(as.numeric(result))
asdf <- (as.numeric(result))
asdf
str(asdf)
str(8)
str(dims)
dims$patn[1:100]
as.num(dims$patn[1:100])
as.numeric(dims$patn[1:100])
dims$patn <- as.numeric(dims$patn)
a <- c('p','q','r','s','t','u')
str(a)
b <- c(1,1,2,2,1,3)
b
str(b)
c <- c(1,3,2)
d <- c('a','b','c')
d
df1 <- data.frame(a=a, b=b)
df1
str(Df1)
str(df1)
df1 <- data.frame(a=a, b=b, stringsAsFactors = FALSE)
str(df1)
df2 <- data.frame(c=c, d=d, stringsAsFactors = FALSE)
str(df2)
merge(df1, df2)
df1 <- data.frame(a=a, nums=b)
df1
df1 <- data.frame(nums=c, d=d)
df1 <- data.frame(a=a, nums=b)
df2 <- data.frame(a=a, nums=b)
df1
df2
df2 <- data.frame(a=a, nums=b)
df2
df1
df1 <- data.frame(a=a, nums=b)
df1
str(df1)
df1 <- data.frame(a=a, nums=b, stringsAsFactors = FALSE)
str(df1)
df2 <- data.frame(nums=c, d=d, stringsAsFactors = FALSE)
df2
str(df2)
?merge
merge(df1, df2, by=nums)
merge(df1, df2, by=intersect(df1$nums, df2$nums))
merge(df1, df2, by=intersect(df1$nums, df2$nums), all=TRUE)
merge(df1, df2, by=intersect(df1$nums, df2$nums), all=FALSE)
merge(df1, df2)]
merge(df1, df2)
merged <- merge(spacings, dims)
head(merged)
top <- head(merged)
top$xmm <- top$xrange*top$x_spacing
top$xmm
40*.7
18*.82
str(top)
merged <- merge(spacings, dims)
merged$x_mm <- merged$x_spacing * merged$xrange
merged$y_mm <- merged$y_spacing * merged$yrange
merged$z_mm <- merged$y_spacing * merged$zrange
write.table(
)
str(cbind(merged$x_mm, merged$patn, merged$nodn))
str(data.frame(merged$x_mm, merged$patn, merged$nodn))
str(data.frame(merged$x_mm, merged$patn, merged$nodn), stringsAsFactors=FALSE)
?data.frame
str(data.frame(c(merged$x_mm, merged$patn, merged$nodn), stringsAsFactors=FALSE))
str(data.frame(c(merged$x_mm, merged$patn, merged$nodn), stringsAsFactors=FALSE))
?write.table
str(test)
merged$patn
head(merged$patn)
top$patn
top
merged$patn
strtop)
str(top)
top = head(merged)
top
ncols(top)
ncol(top)
top[1,10:12]
top[,c(1,10:12)]
top[,c(1,7,10:12)]
top[,c(1,6,10:12)]
result <- merged[,c(1,6,10:12)]
write.table(result,"result.csv", quote = FALSE, col.names=c("Patient_number", "Nodule_name", "x_range_in_mm", "y_range_in_mm", "z_range_in_mm"))
